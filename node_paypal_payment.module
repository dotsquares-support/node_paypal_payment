<?php

/**
 * @file
 * Provides the Node Paypal Payment Gateway after save a node.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Crypt;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_form_alter().
 */
function node_paypal_payment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('node_paypal_payment.settings');
  $types = $config->get('npp_content_types');
  $allowed_node_forms = [];
  if (!empty($types)) {
    foreach ($types as $machine_name => $value) {
      if ($value) {
        $allowed_node_forms[] = 'node_' . $machine_name . '_form';
      }
    }
  }

  if (in_array($form_id, array_values($allowed_node_forms))) {
    $npp_submit_label = $config->get('npp_submit_label');
    $tranlated_label = t('@npp_submit_label', ['@npp_submit_label' => $npp_submit_label]);

    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#value'] = $tranlated_label;
    }
    if (isset($form['actions']['publish'])) {
      $form['actions']['publish']['#value'] = $tranlated_label;
    }
    if (isset($form['actions']['unpublish'])) {
      $form['actions']['unpublish']['#value'] = $tranlated_label;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'node_paypal_payment_node_form_submit';
      }
    }
  }
}

/**
 * Submit function to process payment for created content.
 */
function node_paypal_payment_node_form_submit($form, FormStateInterface $form_state) {
  $config = \Drupal::config('node_paypal_payment.settings');

  if ($config->get('npp_enabled') == 'on') {
    if ($form_state->getFormObject()->getOperation() != 'edit') {
      // Optionally destroy the destination parameter.
      $request = \Drupal::request();
      if ($request->query->has('destination')) {
        $request->query->remove('destination');
      }

      // Get the current created node object.
      $node = $form_state->getFormObject()->getEntity();

      // Generate a token for payment record.
      $timestamp = time();
      $token = Crypt::hmacBase64($timestamp, Settings::get('hash_salt'));

      // Create a payment record to use as payment history of a content.
      db_insert('npp_payments')
        ->fields([
          'method' => 'paypal',
          'entity_id' => $node->id(),
          'entity_title' => $node->getTitle(),
          'amount' => $config->get('npp_amount'),
          'currency' => $config->get('npp_currency'),
          'uid' => \Drupal::currentUser()->id(),
          'token' => $token,
          'timestamp' => time()
        ])
        ->execute();

      // Redirect to payment summary page before final payment.
      if ($redirect = \Drupal::pathValidator()->getUrlIfValid('npp/payment/' . $token)) {
        $form_state->setRedirectUrl($redirect);
      }
    }
  }
}

/**
 * Returns the URL to the specified PayPal WPS server.
 *
 * @param string $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return string
 *   The URL to use to submit requests to the PayPal WPS server.
 */
function node_paypal_payment_paypal_wps_server_url($server) {
  if ($server == 'live') {
    return 'https://www.paypal.com/cgi-bin/webscr';
  }
  else {
    return 'https://www.sandbox.paypal.com/cgi-bin/webscr';
  }
}

/**
 * Implements hook_theme().
 */
function node_paypal_payment_theme($existing, $type, $theme, $path) {
  return [
    'npp_payment_summary' => [
      'variables' => ['data' => []],
    ],
  ];
}
